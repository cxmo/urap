system("ls")
load("angel.data.RData")
load("my.emp.df.RData") 
load("datapav1.RData") 

# treatment group 
founders = angel.data[angel.data$angel.found == 1, ] 
founders.linkedin = founders$linkedin_url

# subset employment histories from my.emp.df 
founders.history = my.emp.df[(my.emp.df$linkedin_url %in% founders.linkedin),]

# control group 
nonfounders1 = angel.data[angel.data$angel.found == 0,]
nonfounders1.linkedin  = nonfounders1$linkedin_url 

# subset employment histories from my.emp.df 
nonfounders1.history = my.emp.df[(my.emp.df$linkedin_url %in% nonfounders1.linkedin),]

# comparing the datasets 
dim(founders.history) # 891737     13
dim(nonfounders1.history) # 140890     13
dim(my.emp.df) # 2881222      13

# grabbing pav1 from my.emp.df 
pav1 = my.emp.df[my.emp.df$source == "pav1",]
pav1.linkedin = pav1$linkedin_url 

# linkedin url from data.pav1 
data.pav1.linkedin = lapply(data.pav1, function(x) return(x$linkedin_url))

length(data.pav1.linkedin) # 447987 
length(unlist(data.pav1.linkedin)) # 447985 

### Sept 16 Edit ### 
titles = my.emp.df$title
founders.index = grep("founders", ignore.case = T,  titles)
titles = my.emp.df$title
founders.titles = titles[founders.index]

# subsetting my.emp.df
my.emp.founder.df = my.emp.df[founders.index,]

# data.pav1 
my.emp.founder.df = my.emp.df[founders.index,]
my.emp.founder.df = my.emp.df[founders.index,]

data.pav1.new = unlist(data.pav1, recursive = F)
linkedin.url = data.pav1.new[seq(1, length(data.pav1.new), 14)]
pav = data.pav1.new[seq(13, length(data.pav1.new), 14)]

times = lapply(pav, length)

length(which(names(times) != "people_also_viewed"))
not.pav = which(names(times) != "people_also_viewed") # starts at index 372295
not.linkedin = which(names(linkedin.url) != "linkedin_url") # starts at index 372296 

### Sept 18 Edit ### 
# for data.pav1 # 
pav1 = lapply(data.pav1, function(x) return(x$people_also_viewed))
length(pav1) == length(data.pav1)
# [1] TRUE
pav1.islist = lapply(pav1, is.list)
sum(unlist(pav1.islist)) 
list.index = which(unlist(pav1.islist))
pav1[list.index]
pav1.removelist = lapply(pav1, function(x) if(is.list(x)){return(NULL)} else{return(x)})
pav1.removelist[list.index] # check to see if lists are removed 

pav1.linkedin = lapply(data.pav1, function(x) return(x$linkedin_url))
pav1.removelist.length = lapply(pav1.removelist, length)
times = unlist(pav1.removelist.length)
linkedin.vector = unlist(pav1.linkedin)

# times and linkedin.vector are different lengths 
linkedin.isnull = lapply(pav1.linkedin, is.null)
which(linkedin.isnull == T) # 372296 372297 

# remove from pav1.linkedin and pav1.removelist.length 
pav1.linkedin.clean = pav1.linkedin[-c(372296, 372297)]
pav1.removelist.length.clean = pav1.removelist.length[-c(372296, 372297)]

# rep pav1.linkedin.clean by length of pav1.removelist.length.clean 
times = unlist(pav1.removelist.length.clean) 
length(times) # 447985
linkedin.vector = unlist(pav1.linkedin.clean)
length(linkedin.vector) # 447985
linkedin.rep = rep(linkedin.vector, times) 

results = mapply(rep, linkedin.vector, times)

# for data.seed # 

